CREATE DATABASE HOSPITAL_SAN_ROQUE;
USE HOSPITAL_SAN_ROQUE;

CREATE TABLE PACIENTE (
id_paciente INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
nombre VARCHAR (20) NOT NULL,
apellido VARCHAR (20) NOT NULL,
dni INT UNIQUE NOT NULL,
fecha_nacimiento DATE NOT NULL,
sexo VARCHAR (2) NOT NULL,
telefono VARCHAR (15) NOT NULL
);

INSERT INTO PACIENTE(id_paciente, nombre, apellido, dni, fecha_nacimiento, sexo, telefono)
VALUES 
('1','laura','gomez','35148957','1990-06-15','f','3515478625');

SELECT * FROM PACIENTE;

INSERT INTO PACIENTE(id_paciente, nombre, apellido, dni, fecha_nacimiento, sexo, telefono)
VALUES 
('2','mario','ruiz','31957450','1985-03-22','m','3544784621'),
('3','andres', 'rivas', '43435999','2000-09-30','m','3541658472'),
('4', 'carmen', 'salas','26896554', '1978-11-05', 'f', 3544859664),
('5', 'valeria', 'mendoza', '38979123', '1995-08-20', 'f', '2806547222'),
('6', 'hugo', 'castro', '29778239', '1970-01-10', 'm', '3541548887'),
('7', 'sofia', 'luna', '40096543', '2002-12-12', 'f', '3515687452'),
('8', 'tomas', 'herrera', '37768449', '1988-05-03', 'm', '3515447852');

CREATE TABLE PROFESIONAL(
id_doctor INT PRIMARY KEY AUTO_INCREMENT NOT NULL, 
nombre_apellido VARCHAR (50) NOT NULL, 
especialidad VARCHAR (20) NOT NULL, 
telefono VARCHAR (15) NOT NULL
);

INSERT INTO PROFESIONAL(id_doctor, nombre_apellido, especialidad, telefono)
VALUES
('1','dr_martin_perez','dermatologo', '351586974'),
('2','dra_monica_solis', 'cardiologa', '351546888'),
('3','dr_carlos_jimenez', 'ortopedia', '351566745'),
('4','dra_carla_ortega', 'medica_generalista', '351678994'),
('5','dr_ricardo_morales', 'neumonologo', '351458455'),
('6','dra_ana_duarte', 'ginecologa', '351566771');

SELECT * FROM PROFESIONAL;

CREATE TABLE CITAS( 
id_cita INT PRIMARY KEY AUTO_INCREMENT NOT NULL, 
id_paciente INT NOT NULL,
id_doctor INT NOT NULL,
fecha_hora DATETIME DEFAULT CURRENT_TIMESTAMP, 
motivo VARCHAR (30),
FOREIGN KEY (id_paciente) REFERENCES paciente (id_paciente),
FOREIGN KEY (id_doctor) REFERENCES PROFESIONAL (id_doctor)
);

INSERT INTO CITAS(id_cita, id_paciente, id_doctor, fecha_hora, motivo)
VALUES
('1','6','3', '2025-05-15','molestias');

SELECT * FROM CITAS;

INSERT INTO CITAS(id_cita, id_paciente, id_doctor, fecha_hora, motivo)
VALUES
('2', '2','2', '2025-04-12','consulta'),
('3', '8', '2', '2025-04-13', 'molestias'),
('4', '1','6', '2025-03-10', 'control'),
('5', '3', '6', '2025-03-18','control');

CREATE TABLE TRATAMIENTO(
id_tratamiento INT PRIMARY KEY NOT NULL,
nombre_tratamiento VARCHAR (20) NOT NULL, 
id_paciente INT NOT NULL,
descripcion VARCHAR (50),
FOREIGN KEY (id_paciente) REFERENCES paciente (id_paciente)
);

SELECT * FROM TRATAMIENTO;

INSERT INTO TRATAMIENTO(id_tratamiento, nombre_tratamiento, id_paciente, descripcion)
VALUES
('1', 'cirugia_menor', '3', 'procedimiento_ambulatorio'),
('2', 'vacunacion', '1', 'prevencion'),
('3',  'control_cardiaca', '2', 'actividad_del_corazon'),
('4', 'control_cardiaca', '8', 'seguimiento');

CREATE TABLE INGRESO(
id_ingreso INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
id_paciente INT NOT NULL, 
id_habitacion INT NOT NULL,
fecha_ingreso DATETIME NOT NULL,
fecha_alta DATETIME NOT NULL,
FOREIGN KEY (id_paciente) REFERENCES paciente (id_paciente)
);

SELECT * FROM INGRESO;

CREATE TABLE HABITACION(
id_habitacion INT PRIMARY KEY NOT NULL,
id_ingreso INT NOT NULL,
Piso VARCHAR (20) NOT NULL,
numero_hab INT NOT NULL,
tipo VARCHAR (20) NOT NULL,
FOREIGN KEY (id_ingreso) REFERENCES ingreso(id_ingreso)
);

SELECT * FROM HABITACION;

DELIMITER //

CREATE TRIGGER evitar_ingreso_duplicado
BEFORE INSERT ON ingreso
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT 1 FROM ingreso
    WHERE id_paciente = NEW.id_paciente AND fecha_alta IS NULL
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'El paciente ya está ingresado.';
  END IF;
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER evitar_cita_duplicada
BEFORE INSERT ON citas
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT 1 FROM citas
    WHERE id_paciente = NEW.id_paciente
      AND id_doctor = NEW.id_doctor
      AND DATE(fecha_hora) = DATE(NEW.fecha_hora)
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'El paciente ya tiene una cita con este médico ese día.';
  END IF;
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER evitar_tratamiento_duplicado
BEFORE INSERT ON tratamiento
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT 1 FROM tratamiento 
    WHERE id_paciente = NEW.id_paciente
    AND nombre_tratamiento = NEW.nombre_tratamiento
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'El paciente ya tiene este tratamiento asignado.';
  END IF;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE Registrar_Cita (
    IN p_id_paciente INT,
    IN p_id_doctor INT,
    IN p_fecha DATETIME,
    IN p_motivo VARCHAR(30)
)
BEGIN
    INSERT INTO CITAS (id_paciente, id_doctor, fecha_hora, motivo)
    VALUES (p_id_paciente, p_id_doctor, p_fecha, p_motivo);
END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE Ingresar_Paciente (
    IN p_id_paciente INT,
    IN p_id_habitacion INT,
    IN p_fecha_ingreso DATETIME
)
BEGIN
    INSERT INTO ingreso (id_paciente, id_habitacion, fecha_ingreso, fecha_alta)
    VALUES (p_id_paciente, p_id_habitacion, p_fecha_ingreso, NULL);
END //

DELIMITER ;

CREATE VIEW vista_historial_citas AS
SELECT 
  c.id_cita,
  c.fecha_hora,
  c.motivo,
  p.nombre AS nombre_paciente,
  p.apellido AS apellido_paciente,
  d.nombre_apellido AS nombre_doctor,
  d.especialidad
FROM citas c
JOIN paciente p ON c.id_paciente = p.id_paciente
JOIN profesional d ON c.id_doctor = d.id_doctor;

SHOW CREATE VIEW vista_historial_citas;

CREATE VIEW vista_tratamientos_paciente AS
SELECT 
  t.id_tratamiento,
  t.nombre_tratamiento,
  t.descripcion,
  p.nombre,
  p.apellido
FROM tratamiento t
JOIN paciente p ON t.id_paciente = p.id_paciente;

SHOW CREATE VIEW vista_tratamientos_paciente;

CREATE VIEW vista_ocupacion_habitaciones AS
SELECT 
  h.id_habitacion,
  h.numero_hab,
  h.piso,
  h.tipo,
  CASE 
    WHEN i.fecha_alta IS NULL THEN 'Ocupada'
    ELSE 'Libre'
  END AS estado
FROM habitacion h
LEFT JOIN ingreso i ON h.id_habitacion = i.id_habitacion
  AND i.fecha_alta IS NULL;


DELIMITER //

CREATE FUNCTION nombre_completo_paciente(p_id INT)
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
  DECLARE nombre_completo VARCHAR(50);
  SELECT CONCAT(nombre, ' ', apellido)
  INTO nombre_completo
  FROM paciente
  WHERE id_paciente = p_id;
  RETURN nombre_completo;
END //

DELIMITER ;

DELIMITER //

CREATE FUNCTION total_citas_paciente(p_id INT)
RETURNS INT
DETERMINISTIC
BEGIN
  DECLARE total INT;
  SELECT COUNT(*) INTO total FROM CITAS WHERE id_paciente = p_id;
  RETURN total;
END //

DELIMITER ;


